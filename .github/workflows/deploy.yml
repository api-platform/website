name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: GitHub Environment Name
        default: prod
        required: false
      docker-images-version:
        type: string
        description: Docker Images Version
        default: latest
        required: false
      gke-cluster:
        type: string
        description: Google Kubernetes Engine Cluster
        required: true
      gke-zone:
        type: string
        description: Google Kubernetes Engine Zone
        required: true
    secrets:
      gke-credentials:
        description: Google Kubernetes Engine Credentials as JSON
        required: true
      gke-project:
        description: Google Kubernetes Engine Project
        required: true
      gh-key:
        description: Github authentication key
        required: true
      pgpasswd:
        description: PGPASSWORD 
        required: true
      # cloudflare-api-token:
      #   description: Cloudflare API Token
      #   required: true
      # cloudflare-zone-id:
      #   description: Cloudflare Zone Id
      #   required: true

jobs:
  meta:
    name: Meta
    runs-on: ubuntu-latest
    outputs:
      context: ${{ steps.meta.outputs.context }}
      cors: ${{ steps.meta.outputs.cors }}
      environment: ${{ steps.meta.outputs.environment }}
      namespace: ${{ steps.meta.outputs.namespace }}
      release_name: ${{ steps.meta.outputs.release_name }}
      replica: ${{ steps.meta.outputs.replica }}
      url: ${{ steps.meta.outputs.url }}
   
    steps:
      - name: Generate metadata
        id: meta
        run: |
          set -o pipefail
          CORS_LOCALHOST="http://localhost|https://localhost|http://localhost:3000"
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
              # Tags are deployed in prod
              CONTEXT=prod
              CORS=$(echo "^https://api-platform.com|$CORS_LOCALHOST$" | sed 's/\./\\./g' )
              ENVIRONMENT=prod
              NAMESPACE=prod-website
              RELEASE_NAME=website-prod
              REPLICA=1
              URL=api-platform.com
          else
              CONTEXT=nonprod
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                  ENVIRONMENT=Preview
                  RELEASE_NAME=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
              else
                  ENVIRONMENT=Staging
                  RELEASE_NAME=${{ github.ref_name }}
              fi
              CORS=$(echo "^https://${RELEASE_NAME}.apip.preprod-tilleuls.ovh|$CORS_LOCALHOST$" | sed 's/\./\\./g' )
              NAMESPACE=nonprod-website
              REPLICA=1
              URL=$RELEASE_NAME.apip.preprod-tilleuls.ovh
          fi
          echo "context=$CONTEXT" >> "$GITHUB_OUTPUT"
          echo "cors=$CORS" >> "$GITHUB_OUTPUT"
          echo "environment=$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "namespace=$NAMESPACE" >> "$GITHUB_OUTPUT"
          echo "release_name=$RELEASE_NAME" >> "$GITHUB_OUTPUT"
          echo "replica=$REPLICA" >> "$GITHUB_OUTPUT"
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "secret=${{ secrets.pgpasswd }}" >> "$GITHUB_OUTPUT"

          cat $GITHUB_OUTPUT

  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'write'
    needs: ["meta"]
    environment:
      name: ${{ needs.meta.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # gcloud does not work with Python 3.10 because collections.Mappings was removed in Python 3.10.
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9.15
      - name: Auth gcloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.gke-credentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.gke-project }}
      - name: Configure gcloud
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud --quiet auth configure-docker
          gcloud container clusters get-credentials ${{ inputs.gke-cluster }} --zone ${{ inputs.gke-zone }}
      # https://github.com/helm/helm/issues/8036
      - name: Build helm dependencies
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami/
          helm repo add stable https://charts.helm.sh/stable/
          helm dependency build ./helm/api-platform
      - name: HELM Deploy
        run: |
          set -o pipefail
          JWT_PASSPHRASE=$(openssl rand -base64 32)
          JWT_SECRET_KEY=$(openssl genpkey -pass file:<(echo "$JWT_PASSPHRASE") -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096)
          helm upgrade ${{  needs.meta.outputs.release_name }} ./helm/api-platform \
            --install \
            --create-namespace \
            --debug \
            --wait \
            --atomic \
            --namespace ${{ needs.meta.outputs.namespace }} \
            --set=app.version=${{ github.sha }} \
            --set=php.image.repository=europe-west1-docker.pkg.dev/${{ secrets.gke-project }}/website/php \
            --set=php.image.tag=${{ inputs.docker-images-version }} \
            --set=php.image.pullPolicy=Always \
            --set=caddy.image.repository=europe-west1-docker.pkg.dev/${{ secrets.gke-project }}/website/caddy \
            --set=caddy.image.tag=${{ inputs.docker-images-version }} \
            --set=caddy.image.pullPolicy=Always \
            --set=pwa.image.repository=europe-west1-docker.pkg.dev/${{ secrets.gke-project }}/website/pwa \
            --set=pwa.image.tag=${{ inputs.docker-images-version }} \
            --set=pwa.image.pullPolicy=Always \
            --set=bucket.s3Upstream=storage.googleapis.com \
            --set=bucket.s3Name=api-platform-website-v3 \
            --set=service.type=NodePort \
            --set=ingress.enabled=true \
            --set=ingress.hosts[0].host=${{ needs.meta.outputs.url }} \
            --set=ingress.hosts[0].paths[0].path=/ \
            --set=ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set=ingress.tls[0].hosts[0]=${{ needs.meta.outputs.url }} \
            --set=ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt-production \
            --set=ingress.tls[0].secretName=${{ needs.meta.outputs.release_name }}-website-ssl \
            --set=php.jwt.secretKey="$JWT_SECRET_KEY" \
            --set=php.jwt.publicKey="$(openssl pkey -in <(echo "$JWT_SECRET_KEY") -passin file:<(echo "$JWT_PASSPHRASE") -pubout)" \
            --set=php.jwt.passphrase=$JWT_PASSPHRASE \
            --set=php.corsAllowOrigin=${{ needs.meta.outputs.cors }} \
            --set=php.host=${{ needs.meta.outputs.url }} \
            --set=next.rootUrl=${{ needs.meta.outputs.url }} \
            --set=github.key=${{ secrets.gh-key }} \
            --set=postgresql.global.postgresql.auth.password="${{ secrets.pgpasswd }}" \
            --set=postgresql.global.postgresql.auth.username=website \
            | sed --unbuffered '/USER-SUPPLIED VALUES/,$d'
      - name: Debug kube events
        if: failure()
        run: kubectl get events --namespace=${{ needs.meta.outputs.namespace  }} --sort-by .metadata.creationTimestamp

  links:
    name: Check for dead links
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Define release name
        run: |
          set -o pipefail
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
              echo "RELEASE_NAME=website-prod" >> "$GITHUB_ENV"
          else
              CONTEXT=nonprod
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                  echo RELEASE_NAME=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH") >> "$GITHUB_ENV"
              else
                  echo "RELEASE_NAME=${{ github.ref_name }}" >> "$GITHUB_ENV"
              fi
          fi
      - name: Check for dead links
        uses: lycheeverse/lychee-action@v1.8.0
        with:
          args: --verbose --no-progress https://${{ env.RELEASE_NAME}}.apip.preprod-tilleuls.ovh
