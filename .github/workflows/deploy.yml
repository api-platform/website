name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: GitHub Environment Name
        default: prod
        required: false
      docker-images-version:
        type: string
        description: Docker Images Version
        default: latest
        required: false
      gke-cluster:
        type: string
        description: Google Kubernetes Engine Cluster
        required: true
      gke-zone:
        type: string
        description: Google Kubernetes Engine Zone
        required: true
    secrets:
      gke-credentials:
        description: Google Kubernetes Engine Credentials as JSON
        required: true
      gke-project:
        description: Google Kubernetes Engine Project
        required: true
      gh-key:
        description: Github authentication key
        required: true
      # cloudflare-api-token:
      #   description: Cloudflare API Token
      #   required: true
      # cloudflare-zone-id:
      #   description: Cloudflare Zone Id
      #   required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # gcloud does not work with Python 3.10 because collections.Mappings was removed in Python 3.10.
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9.15
      - name: Auth gcloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.gke-credentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.gke-project }}
      - name: Configure gcloud
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud --quiet auth configure-docker
          gcloud container clusters get-credentials ${{ inputs.gke-cluster }} --zone ${{ inputs.gke-zone }}
      # https://github.com/helm/helm/issues/8036
      - name: Build helm dependencies
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami/
          helm repo add stable https://charts.helm.sh/stable/
          helm dependency build ./helm/api-platform
      - name: Define namespace
        run: |       
          set -o pipefail
          if [[ "${{ github.ref }}" == 'refs/heads/prod' ]]; then
              # Tags are deployed in prod
              echo "CONTEXT=prod" >> "$GITHUB_ENV"
              echo "RELEASE_NAME=website-prod" >> "$GITHUB_ENV"
              echo "URL=api-platform.com" >> "$GITHUB_ENV"
              echo "CORS='[\"https://api-platform.com\", \"http://localhost\", \"https://localhost\", \"http://localhost:3000\"]'" >> "$GITHUB_ENV"
              echo "NAMESPACE=prod-website" >> "$GITHUB_ENV"
          else
              CONTEXT=nonprod
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                  echo RELEASE_NAME=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH") >> "$GITHUB_ENV"
                  export RELEASE_NAME=pr-$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
              else
                  echo "RELEASE_NAME=${{ github.ref_name }}" >> "$GITHUB_ENV"
                  export RELEASE_NAME=${{ github.ref_name }}
              fi
              echo "URL=$RELEASE_NAME.apip.preprod-tilleuls.ovh" >> "$GITHUB_ENV"
              echo "NAMESPACE=nonprod-website" >> "$GITHUB_ENV"
              echo 'CORS=["https://${{ env.RELEASE_NAME}}.apip.preprod-tilleuls.ovh", "http://localhost", "https://localhost", "http://localhost:3000"]' >> "$GITHUB_ENV"
          fi
      - name: Check for existing namespace
        id: k8s-namespace
        run: echo "namespace=$(kubectl get namespace ${{ env.NAMESPACE }} | tr -d '\n' 2> /dev/null)" >> $GITHUB_OUTPUT
      # Release name MUST start with a letter
      # GitHub doesn't support multilines environment variables (JWT_*_KEY)
      - name: Deploy in new namespace
        if: steps.k8s-namespace.outputs.namespace == ''
        run: |
          set -o pipefail
          JWT_PASSPHRASE=$(openssl rand -base64 32)
          JWT_SECRET_KEY=$(openssl genpkey -pass file:<(echo "$JWT_PASSPHRASE") -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096)
          helm upgrade ${{ env.RELEASE_NAME }} ./helm/api-platform \
            --reuse-values \
            --install \
            --create-namespace \
            --debug \
            --wait \
            --atomic \
            --namespace=${{ env.NAMESPACE }} \
            --set=app.version=${{ github.sha }} \
            --set=php.image.repository=eu.gcr.io/${{ secrets.gke-project }}/website/php \
            --set=php.image.tag=${{ inputs.docker-images-version }} \
            --set=php.image.pullPolicy=Always \
            --set=caddy.image.repository=eu.gcr.io/${{ secrets.gke-project }}/website/caddy \
            --set=caddy.image.tag=${{ inputs.docker-images-version }} \
            --set=caddy.image.pullPolicy=Always \
            --set=pwa.image.repository=eu.gcr.io/${{ secrets.gke-project }}/website/pwa \
            --set=pwa.image.tag=${{ inputs.docker-images-version }} \
            --set=pwa.image.pullPolicy=Always \
            --set=bucket.s3Upstream=storage.googleapis.com \
            --set=bucket.s3Name=api-platform-website-v3 \
            --set=service.type=NodePort \
            --set=ingress.enabled=true \
            --set=ingress.hosts[0].host=${{ env.URL }} \
            --set=ingress.hosts[0].paths[0].path=/ \
            --set=ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
            --set=ingress.tls[0].hosts[0]=${{ env.URL }} \
            --set=ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt-production \
            --set=ingress.tls[0].secretName=${{ env.RELEASE_NAME }}-website-ssl \
            --set=php.jwt.secretKey="$JWT_SECRET_KEY" \
            --set=php.jwt.publicKey="$(openssl pkey -in <(echo "$JWT_SECRET_KEY") -passin file:<(echo "$JWT_PASSPHRASE") -pubout)" \
            --set=php.jwt.passphrase=$JWT_PASSPHRASE \
            --set=php.corsAllowOrigin="^$(echo "${{ join(fromJSON(env.CORS), '|') }}" | sed 's/\./\\./g')$" \
            --set=php.host=${{ env.URL }} \
            --set=next.rootUrl=${{ env.URL }} \
            --set=github.key=${{ secrets.gh-key }} \
            --set=ressources.requests.cpu=250m \
            --set=ressources.requests.memory=256Mi \
            --set=ressources.limits.memory=700Mi \
            --set=postgresql.global.postgresql.auth.password=$(openssl rand -base64 32 | tr -d "=+/") \
            --set=postgresql.global.postgresql.auth.username=website \
            | sed --unbuffered '/USER-SUPPLIED VALUES/,$d'
      - name: Upgrade namespace
        if: steps.k8s-namespace.outputs.namespace != ''
        run: |
          set -o pipefail
          helm upgrade ${{ env.RELEASE_NAME }} ./helm/api-platform \
            --reuse-values \
            --install \
            --create-namespace \
            --debug \
            --wait \
            --atomic \
            --namespace=${{ env.NAMESPACE }} \
            --set=app.version=${{ github.sha }} \
            --set=php.image.repository=eu.gcr.io/${{ secrets.gke-project }}/website/php \
            --set=php.image.tag=${{ inputs.docker-images-version }} \
            --set=php.image.pullPolicy=Always \
            --set=caddy.image.repository=eu.gcr.io/${{ secrets.gke-project }}/website/caddy \
            --set=caddy.image.tag=${{ inputs.docker-images-version }} \
            --set=caddy.image.pullPolicy=Always \
            --set=pwa.image.repository=eu.gcr.io/${{ secrets.gke-project }}/website/pwa \
            --set=pwa.image.tag=${{ inputs.docker-images-version }} \
            --set=pwa.image.pullPolicy=Always \
            --set=php.corsAllowOrigin="^$(echo "${{ join(fromJSON(env.CORS), '|') }}" | sed 's/\./\\./g')$" \
            --set=github.key=${{ secrets.gh-key }} \
            --set=next.rootUrl=${{ env.URL }} \
            --set=ressources.requests.cpu=250m \
            --set=ressources.requests.memory=256Mi \
            --set=ressources.limits.memory=700Mi \
            --set=bucket.s3Upstream=storage.googleapis.com \
            --set=bucket.s3Name=api-platform-website-v3 \
            | sed --unbuffered '/USER-SUPPLIED VALUES/,$d'
      - name: Debug kube events
        if: failure()
        run: kubectl get events --namespace=${{ env.NAMESPACE }} --sort-by .metadata.creationTimestamp
