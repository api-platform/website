#!/usr/bin/env node

require('dotenv').config();
const {execSync} = require('child_process');
const fs = require('fs');
const path = require('path');
const {docPagesDirectory, current, versions} = require('../constants');
const versionHelper = require('../src/lib/versionHelper');

const docsRepository = process.env.DOCS_REPOSITORY;
console.info('\x1b[36m', `Using repository: ${docsRepository}`, '\x1b[37m');

console.info('\x1b[36m', `Deleting ${docPagesDirectory}`, '\x1b[37m');
execSync(`rm -rf ${docPagesDirectory}`);

console.info('\x1b[36m', `Cloning the current version in ${docPagesDirectory}${current}`, '\x1b[37m');
execSync(`git clone ${docsRepository} ${docPagesDirectory}${current}`);
console.info('\x1b[36m', 'Current version cloned', '\x1b[37m');

const currentVersion = execSync(`git -C ${docPagesDirectory}${current} rev-parse --abbrev-ref HEAD`).toString().replace(/\n$/, '');
console.info('\x1b[32m', `Current version is: ${currentVersion}`, '\x1b[37m');

let masterVersion = currentVersion.match(/\d+/g);
const bumpAt = 1; // 0: major; 1: minor
for (let i = 0; i < masterVersion.length; i += 1) {
    if (i === bumpAt) {
        masterVersion[i] = +masterVersion[i] + 1;
    }
    if (i > bumpAt) {
        masterVersion[i] = 0;
    }
}
masterVersion = masterVersion.join('.');
console.info('\x1b[32m', `Master version is: ${masterVersion}`, '\x1b[37m');

versions.forEach(version => {
    const versionDirectory = versionHelper.getPrefixedVersion(version);

    console.info('\x1b[36m', `Checking out the ${version} version in ${docPagesDirectory}${versionDirectory} directory`, '\x1b[37m');
    execSync(`cp -R ${docPagesDirectory}${current} ${docPagesDirectory}${versionDirectory}/`);
    execSync(`cd ${docPagesDirectory}${versionDirectory} && git checkout ${version}`);
    console.info('\x1b[36m', `${version} version checked out`, '\x1b[37m');
});

console.info('\x1b[36m', 'Replacing versions in constants.js', '\x1b[37m');
const constantsContent = fs.readFileSync(path.resolve(__dirname, '../constants.js')).toString()
    .replace(/currentVersion: '.*'/, `currentVersion: '${currentVersion}'`)
    .replace(/masterVersion: '.*'/, `masterVersion: '${masterVersion}'`)
;
fs.writeFileSync(path.resolve(__dirname, '../constants.js'), constantsContent, 'utf-8');
